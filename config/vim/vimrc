"             _           _
"   _ __ ___ (_)_ __ __ _( )___
"  | '_ ` _ \| | '__/ _` |// __|
"  | | | | | | | | | (_| | \__ \
"  |_| |_| |_|_|_|  \__,_| |___/
"         _                              __ _
"  __   _(_)_ __ ___     ___ ___  _ __  / _(_) __ _
"  \ \ / / | '_ ` _ \   / __/ _ \| '_ \| |_| |/ _` |
"   \ V /| | | | | | | | (_| (_) | | | |  _| | (_| |
"    \_/ |_|_| |_| |_|  \___\___/|_| |_|_| |_|\__, |
"                                             |___/

" ------------------------------------------------------------------------------
"   GENERAL SETTINGS
" ------------------------------------------------------------------------------

set nocompatible                       " use vim rather than vi settings
set backspace=indent,eol,start         " allow backspacing over indentation,
                                       " line break & insertion startup
set history=10000                      " bigger history of executed commands
set showmode                           " show incomplete commands at the bottom
set autoread                           " auto re-read files if unmodified inside
                                       " vim
set hidden                             " manage multiple buffers effectively
set ruler                              " allways show cursor position
set wildmenu                           " display command line's tab complete
                                       " options as a menu
set tabpagemax=40                      " max tabs that can be opened from cl
set noerrorbells                       " disable error beeps
set visualbell                         " flash screen on error
set mouse=a                            " enable mouse for scrolling and resizing
set title                              " windows title equals file name
set noswapfile                         " disable swap files

set nobackup                           " disable backup files
set nowritebackup                      "

set tabstop=2                          " indentation options
set softtabstop=4                      "
set shiftwidth=4                       "
set autoindent                         "
set wm=2                               "
filetype plugin indent on              "
set expandtab                          "    use spaces as tabs

set confirm                            " display confirmation message when
                                       " closing unsaved files
set nomodeline                         " use vimrc instead of file's mode lines
set nrformats-=octal                   " interprete octal as decimal when
                                       " incrementing numbers
set shell=/usr/bin/zsh                 " default shell used to execute commands
set number relativenumber              " set line numbers
set cursorline                         " set line where cursor is
set exrc                               " look for .vimrc in current dir
set secure                             " enables secure options for 'set exrc'

" ------------------------------------------------------------------------------
"   SEARCH SETTINGS
" ------------------------------------------------------------------------------

set incsearch                          " find next match while typing
set hlsearch                           " highlight searches
set ignorecase                         " ignore case sensitivity unless capital
set smartcase                          "   is typed

" ------------------------------------------------------------------------------
"   TEXT RENDERING SETTINGS
" ------------------------------------------------------------------------------

set encoding=utf-8                     " use utf8
set linebreak                          " wrap lines
set scrolloff=3                        " space at end of screen while scrolling
set sidescrolloff=5                    "
syntax enable                          " enable syntax highlighting
syntax on

" ------------------------------------------------------------------------------
"   START UP SETTINGS
" ------------------------------------------------------------------------------

" set splitbelow                         " open Terminal at start on bottom
" autocmd VimEnter * terminal            "
" set termwinsize=7x0                    " set Terminal size
"
" autocmd VimEnter * Lexplore            " open Netrw on startup
" let g:netrw_winsize = 22               "
" let g:netrw_liststyle = 3              "

" ------------------------------------------------------------------------------
"   PLUGINS INSTALLED
" ------------------------------------------------------------------------------

" call plug#begin('~/.vim/plugged')
" call plug#end()

" ------------------------------------------------------------------------------
"   LIGHTLINE SPECIFIC SETTINGS
" ------------------------------------------------------------------------------

set laststatus=2                       " allways display status bar
if !has('gui_running')
  set t_Co=256
endif

" ------------------------------------------------------------------------------
"   COC SPECIFIC SETTINGS
" ------------------------------------------------------------------------------
" 
" set cmdheight=2                        " Give more space for displaying messages.
" set updatetime=300                     " Having longer updatetime (default is
"                                        "   4000 ms = 4 s) leads to noticeable
"                                        "   delays and poor user experience.
" set shortmess+=c                       " Don't pass messages to |ins-completion-menu|.
" 
" " Always show the signcolumn, otherwise it would shift the text each time
" " diagnostics appear/become resolved.
" if has("nvim-0.5.0") || has("patch-8.1.1564")
"   " Recently vim can merge signcolumn and number column into one
"   set signcolumn=number
" else
"   set signcolumn=yes
" endif
" 
" " Use tab for trigger completion with characters ahead and navigate.
" " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" " other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" 
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" 
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction
" 
" " Make <CR> auto-select the first completion item and notify coc.nvim to
" " format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" 
" " Use `[g` and `]g` to navigate diagnostics
" " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)
" 
" " GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
" 
" " Use K to show documentation in preview window.
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" 
" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   elseif (coc#rpc#ready())
"     call CocActionAsync('doHover')
"   else
"     execute '!' . &keywordprg . " " . expand('<cword>')
"   endif
" endfunction
" 
" " Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')
" 
" " Symbol renaming.
" nmap <leader>rn <Plug>(coc-rename)
" 
" " Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)
" 
" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder.
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end
" 
" " Applying codeAction to the selected region.
" " Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)
" 
" " Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" " Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)
" 
" " Map function and class text objects
" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" omap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap af <Plug>(coc-funcobj-a)
" xmap ic <Plug>(coc-classobj-i)
" omap ic <Plug>(coc-classobj-i)
" xmap ac <Plug>(coc-classobj-a)
" omap ac <Plug>(coc-classobj-a)
" 
" " Remap <C-f> and <C-b> for scroll float windows/popups.
" if has('nvim-0.4.0') || has('patch-8.2.0750')
"   nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"   nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"   inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
"   inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
"   vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"   vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
" endif
" 
" " Use CTRL-S for selections ranges.
" " Requires 'textDocument/selectionRange' support of language server.
" nmap <silent> <C-s> <Plug>(coc-range-select)
" xmap <silent> <C-s> <Plug>(coc-range-select)
" 
" " Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')
" 
" " Add `:Fold` command to fold current buffer.
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" 
" " Add `:OR` command for organize imports of the current buffer.
" command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')
" 
" " Add (Neo)Vim's native statusline support.
" " NOTE: Please see `:h coc-status` for integrations with external plugins that
" " provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" 
" " Mappings for CoCList
" " Show all diagnostics.
" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions.
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" " Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list.
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" ------------------------------------------------------------------------------
"   C LANGUAGE SPECIFIC SETTINGS
" ------------------------------------------------------------------------------

"   from: https://www.alexeyshmalko.com/2014/using-vim-as-c-cpp-ide/

augroup project
  autocmd!
  autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END

let &path.="src/include,/usr/include/AL,"
set includeexpr=substitute(v:fname,'\\.','/','g')

" ------------------------------------------------------------------------------
"   KEYMAP SETTINGS
" ------------------------------------------------------------------------------
                                       " set leader to Space
nnoremap <SPACE> <Nop>
let mapleader = " "
                                       " clear search highlight with <Leader> h
nmap <leader>nh :noh <CR>
                                       " quick save
nmap <leader>w :w! <CR>
                                       " show registers
nmap <leader>p :reg <CR>

nmap <leader>m<CR> :MarkdownPreviewToggle<CR>
                                       " open Terminal
nmap <leader>t :terminal <CR>

" ------------------------------------------------------------------------------
"   THEME SETTINGS
" ------------------------------------------------------------------------------
                                      " Set colorscheme for lightline
let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ }

if has('termguicolors')                " needed for theme
  set termguicolors
endif

colorscheme neodark                    " set theme

set colorcolumn=100                    " set vertical line at <number> column
highlight ColorColumn ctermbg=235 guibg=#585858
